name: Build Linux package (REUSABLE)

on:
  workflow_call:
    inputs:
      RELEASE:
        required: true
        type: string
      LINUX:
        required: true
        type: string
      PACKAGE:
        required: true
        type: string
      PLATFORMS:
        required: true
        type: string
      TEST:
        required: false
        type: boolean
        default: false
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_TOKEN:
        required: true
      ARM_SSH_KEY:
        required: false
      ARM_SSH_IP:
        required: false
      ARM_SSH_CONFIG:
        required: false

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit

      - name: Checkout source code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
      - name: Replace VERSION
        if: inputs.RELEASE == 'testing'
        run: ./misc/update-version.sh testing
      - name: Extract arch
        run: |
          echo "ARCH=${{ env.PLATFORMS }}" | sed 's/linux//g' | sed 's@/@@g' >> "$GITHUB_ENV"
        env:
          PLATFORMS: ${{ inputs.PLATFORMS }}
      - name: Extract linux arch
        if: inputs.PACKAGE == 'rpm'
        run: |
          echo "LARCH=${{ env.ARCH }}" | sed 's/amd64/x86_64/g' | sed 's/arm64/aarch64/g' >> "$GITHUB_ENV"
        env:
          ARCH: ${{ env.ARCH }}
      - name: Extract linux arch
        if: inputs.PACKAGE == 'deb'
        run: |
          echo "LARCH=${{ env.ARCH }}" >> "$GITHUB_ENV"
        env:
          ARCH: ${{ env.ARCH }}
      - name: Setup SSH for ARM node
        if: startsWith(env.ARCH, 'arm') == true
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa_arm
          chmod 600 ~/.ssh/id_rsa_arm
          echo "$SSH_CONFIG" | sed "s/SSH_IP/$SSH_IP/g" > ~/.ssh/config
        env:
          SSH_KEY: ${{ secrets.ARM_SSH_KEY }}
          SSH_IP: ${{ secrets.ARM_SSH_IP }}
          SSH_CONFIG: ${{ secrets.ARM_SSH_CONFIG }}
      - name: Setup Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0
        if: startsWith(env.ARCH, 'arm') == false
      - name: Setup Buildx (ARM)
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0
        if: startsWith(env.ARCH, 'arm') == true
        with:
          endpoint: ssh://root@arm
          platforms: linux/arm64,linux/arm/v7,linux/arm/v6
      - name: Login to Docker Hub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to ghcr
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Build testing package image
      - name: Build package image
        if: inputs.RELEASE == 'testing'
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          context: .
          load: true
          file: src/linux/Dockerfile-${{ inputs.LINUX }}
          platforms: ${{ inputs.PLATFORMS }}
          tags: local/bunkerweb-${{ inputs.LINUX }}:latest
          cache-from: type=gha,scope=${{ inputs.LINUX }}-testing
          cache-to: type=gha,scope=${{ inputs.LINUX }}-testing,mode=min
      # Build non-testing package image
      - name: Build package image
        if: inputs.RELEASE != 'testing'
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          context: .
          load: true
          file: src/linux/Dockerfile-${{ inputs.LINUX }}
          platforms: ${{ inputs.PLATFORMS }}
          tags: local/bunkerweb-${{ inputs.LINUX }}:latest
      # Generate package
      - name: Generate package
        if: startsWith(env.ARCH, 'arm') == false
        run: ./src/linux/package.sh ${{ inputs.LINUX }} ${{ env.LARCH }}
        env:
          LARCH: ${{ env.LARCH }}
      - name: Generate package (ARM)
        if: startsWith(env.ARCH, 'arm') == true
        run: |
          docker save local/bunkerweb-${{ inputs.LINUX }}:latest | ssh -C root@arm docker load
          scp ./src/linux/package.sh root@arm:/opt
          ssh root@arm chmod +x /opt/package.sh
          ssh root@arm /opt/package.sh ${{ inputs.LINUX }} ${{ env.LARCH }} "$(cat src/VERSION | tr -d '\n')"
          scp -r root@arm:/root/package-${{ inputs.LINUX }} ./package-${{ inputs.LINUX }}
        env:
          LARCH: ${{ env.LARCH }}
      - uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: package-${{ inputs.LINUX }}-${{ env.LARCH }}
          path: package-${{ inputs.LINUX }}/*.${{ inputs.PACKAGE }}
      # Build test image
      - name: Extract metadata
        if: inputs.TEST == true
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        with:
          images: ghcr.io/bunkerity/${{ inputs.LINUX }}-tests:${{ inputs.RELEASE }}
      - name: Build test image
        if: inputs.TEST == true
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          context: .
          file: tests/linux/Dockerfile-${{ inputs.LINUX }}
          platforms: ${{ inputs.PLATFORMS }}
          push: true
          tags: ghcr.io/bunkerity/${{ inputs.LINUX }}-tests:${{ inputs.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}
